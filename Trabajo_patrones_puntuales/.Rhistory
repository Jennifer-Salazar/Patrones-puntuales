# Datos en metros (UTM)
data_UTM <- project(data_long_lat ,"+proj=utm +zone=18N +ellps=WGS84")
library(maptools)
# Lectura del shape de la región de interés:
coordinate.units <- c("metre", "metres")
# region del area metropolitana
region <- st_read("Area-Metropolitana.shp")
region <- st_transform(region, crs = CRS("+proj=utm +zone=18N +ellps=WGS84"))
# Ventana
win <- as(as(region, 'Spatial'), 'owin')
ppp.locations <- ppp(x = data_UTM[,1],
y = data_UTM[,2],
window = win)
# Gráfico del objeto ppp
unitname(ppp.locations) <- coordinate.units
ppp.locations <- as.ppp(ppp.locations)
plot(ppp.locations)
win <- ripras(ppp.locations)
ppp.locations <- ppp(x = data_UTM[,1],
y = data_UTM[,2],
window = win)
ppp.locations <- as.ppp(ppp.locations)
plot(ppp.locations)
qc.loc <- quadratcount(ppp.locations, nx=3, ny=4)
plot(ppp.locations, pch=3, cex=0.6)
plot(qc.loc, add=T, textargs = list(col='red'))
qc.loc <- quadratcount(ppp.locations, nx=3, ny=4)
plot(ppp.locations, pch=3, cex=0.6)
plot(qc.loc, add=T, textargs = list(col='red'))
plot(as.im(ppp.locations,dimyx=3), main="Conteo por cuandrantes - imagen")
plot(as.im(ppp.locations,dimyx=4), main="Conteo por cuandrantes - imagen")
qc.loc <- quadratcount(ppp.locations, nx=3, ny=4)
plot(ppp.locations, pch=3, cex=0.6)
plot(qc.loc, add=T, textargs = list(col='red'))
par(mfrow=c(1,2))
qc.loc <- quadratcount(ppp.locations, nx=3, ny=4)
plot(ppp.locations, pch=3, cex=0.6)
plot(qc.loc, add=T, textargs = list(col='red'))
plot(as.im(ppp.locations,dimyx=4), main="Conteo por cuandrantes - imagen")
par(mfrow=c(1,2))
qc.loc <- quadratcount(ppp.locations, nx=3, ny=4)
plot(ppp.locations, pch=3, cex=0.6)
plot(qc.loc, add=T, textargs = list(col='red'))
plot(as.im(ppp.locations,dimyx=3), main="Conteo por cuandrantes")
quadrat.test(qc.loc)
intensidad <- density.ppp(ppp.locations, sigma = bw.scott(ppp.locations))
intensidadpoints <- density.ppp(ppp.locations, sigma = bw.scott(ppp.locations), at="points")
# Estimaciones de la intensidad
par(mfrow=c(1,2))
plot(intensidad, main = "Gráfico de probabilidad")
plot(intensidadpoints, main = "Gráfico de puntos")
par(mfrow=c(1,2))
plot(intensidad, main = "Gráfico de probabilidad")
contour(intensidad, axes = FALSE)
plot(intensidad, main = "Gráfico de probabilidad")
contour(intensidad, axes = FALSE)
plot(intensidad, main = "Gráfico de probabilidad")
contour(intensidad, add = TRUE)
par(mfrow=c(1,2))
plot(intensidad, main = "Gráfico de probabilidad")
plot(intensidad, main = "Gráfico de probabilidad")
contour(intensidad, add = TRUE)
par(mfrow=c(2,3), mar=c(0,0,1,2))
# Ancho de banda por defecto
plot(density.ppp(ppp.locations), main = paste("Sigma (defecto):", round(attr(density.ppp(ppp.locations), "sigma"),3)))
# Ancho de banda: diggle
plot(density.ppp(ppp.locations, sigma = bw.diggle(ppp.locations)), main = paste("Sigma (diggle):", round(attr(density.ppp(ppp.locations, sigma = bw.diggle(ppp.locations)), "sigma"),3)))
# Ancho de banda: CvL
plot(density.ppp(ppp.locations, sigma = bw.CvL(ppp.locations)), main = paste("Sigma (CvL):", round(attr(density.ppp(ppp.locations, sigma = bw.CvL(ppp.locations)), "sigma"),3)))
# Ancho de banda: frac
plot(density.ppp(ppp.locations, sigma = bw.frac(ppp.locations)), main = paste("Sigma (frac):", round(attr(density.ppp(ppp.locations, sigma = bw.frac(ppp.locations)), "sigma"),3)))
# Ancho de banda: ppl
plot(density.ppp(ppp.locations, sigma = bw.ppl(ppp.locations)), main = paste("Sigma (ppl):", round(attr(density.ppp(ppp.locations, sigma = bw.ppl(ppp.locations)), "sigma"),3)))
# Ancho de banda: scott.iso
plot(density.ppp(ppp.locations, sigma = bw.scott.iso(ppp.locations)), main = paste("Sigma (scott.iso):", round(attr(density.ppp(ppp.locations, sigma = bw.scott.iso(ppp.locations)), "sigma"),3)))
plot(densityAdaptiveKernel(ppp.locations), main = "densityAdaptiveKernel")
persp(intensidad)
persp(intensidad, theta=-40, phi=40)
persp(intensidad, theta=90, phi=15)
persp(intensidad, theta=45, phi=15)
persp(intensidad, theta=45, phi=0)
persp(intensidad, theta=45, phi=-20)
persp(intensidad, theta=45, phi=20)
persp(intensidad, theta=0, phi=20)
persp(intensidad, theta=10, phi=20)
persp(intensidad, theta=-10, phi=20)
persp(intensidad, theta=-30, phi=20)
persp(intensidad, theta=-30, phi=30)
persp(intensidad, theta=-30, phi=45)
persp(intensidad, theta=-30, phi=-45)
persp(intensidad, theta=-30, phi=90)
persp(intensidad, theta=-30, phi=0)
persp(intensidad, theta=-30, phi=15)
persp(intensidad, phi=15)
intensidad <- density.ppp(ppp.locations, sigma = bw.scott(ppp.locations))
# Estimaciones de la intensidad
par(mfrow=c(1,2))
plot(intensidad, main = "Gráfico de probabilidad")
plot(intensidad, main = "Gráfico de probabilidad")
contour(intensidad, add = TRUE)
persp(intensidad)
aden <- adaptive.density(ppp.location, f = 0.01, nrep = 10)
aden <- adaptive.density(ppp.locations, f = 0.01, nrep = 10)
plot(aden)
aden <- adaptive.density(ppp.locations)
plot(aden)
base.loc <- ppm(ppp.locations, ~1)
coef(base.loc)
loglin.loc <- ppm(ppp.locations, ~x+y)
coef(loglin.loc)
loglin.loc.x <- ppm(ppp.locations, ~x)
coef(loglin.loc.x)
loglin.loc.y <- ppm(ppp.locations, ~y)
coef(loglin.loc.y)
logquad.loc <- ppm(ppp.locations, ~polynom(x, y, 2))
coef(logquad.loc)
logcubic.loc <- ppm(ppp.locations, ~polynom(x, y, 3))
coef(logcubic.loc)
par(mfrow=c(2,3),mar=c(0,0,1,2))
plot(predict(base.loc), main='Modelo base')
points(ppp.locations, pch=16, cex=0.2)
plot(predict(loglin.loc), main='log-linear')
points(ppp.locations, pch=16, cex=0.2)
plot(predict(loglin.loc.x), main='log-linear en x')
points(ppp.locations, pch=16, cex=0.2)
plot(predict(loglin.loc.y), main='log-linear en y')
points(ppp.locations, pch=16, cex=0.2)
plot(predict(logquad.loc), main='log-cuadrático con interacción')
points(ppp.locations, pch=16, cex=0.2)
plot(predict(logcubic.loc), main='log-cúbico con interacción')
points(ppp.locations, pch=16, cex=0.2)
par(mfrow=c(2,3),mar=c(1,1,2,2))
diagnose.ppm(base.loc, which = "smooth", main = "modelo base")
diagnose.ppm(loglin.loc, which = "smooth", main = 'log-linear')
diagnose.ppm(loglin.loc.x, which = "smooth", main = 'log-linear en x')
diagnose.ppm(loglin.loc.y, which = "smooth", main = 'log-linear en y')
diagnose.ppm(logquad.loc, which = "smooth", main = 'log-cuadrático')
diagnose.ppm(logcubic.loc, which = "smooth", main = 'log-cúbico')
par(mfrow=c(2,3),mar=c(0,0,1,2))
plot(predict(base.loc), main='Modelo base')
points(ppp.locations, pch=16, cex=0.2)
plot(predict(loglin.loc), main='log-linear')
points(ppp.locations, pch=16, cex=0.2)
plot(predict(loglin.loc.x), main='log-linear en x')
points(ppp.locations, pch=16, cex=0.2)
plot(predict(loglin.loc.y), main='log-linear en y')
points(ppp.locations, pch=16, cex=0.2)
plot(predict(logquad.loc), main='log-cuadrático con interacción')
points(ppp.locations, pch=16, cex=0.2)
plot(predict(logcubic.loc), main='log-cúbico con interacción')
points(ppp.locations, pch=16, cex=0.2)
intensidad <- density.ppp(ppp.locations, sigma = bw.scott(ppp.locations))
# Estimaciones de la intensidad
par(mfrow=c(1,2))
plot(intensidad, main = "Gráfico de probabilidad")
plot(intensidad, main = "Gráfico de probabilidad")
contour(intensidad, add = TRUE)
par(mfrow=c(2,3), mar=c(0,0,1,2))
# Ancho de banda por defecto
plot(density.ppp(ppp.locations), main = paste("Sigma (defecto):", round(attr(density.ppp(ppp.locations), "sigma"),3)))
# Ancho de banda: diggle
plot(density.ppp(ppp.locations, sigma = bw.diggle(ppp.locations)), main = paste("Sigma (diggle):", round(attr(density.ppp(ppp.locations, sigma = bw.diggle(ppp.locations)), "sigma"),3)))
# Ancho de banda: CvL
plot(density.ppp(ppp.locations, sigma = bw.CvL(ppp.locations)), main = paste("Sigma (CvL):", round(attr(density.ppp(ppp.locations, sigma = bw.CvL(ppp.locations)), "sigma"),3)))
# Ancho de banda: frac
plot(density.ppp(ppp.locations, sigma = bw.frac(ppp.locations)), main = paste("Sigma (frac):", round(attr(density.ppp(ppp.locations, sigma = bw.frac(ppp.locations)), "sigma"),3)))
# Ancho de banda: ppl
plot(density.ppp(ppp.locations, sigma = bw.ppl(ppp.locations)), main = paste("Sigma (ppl):", round(attr(density.ppp(ppp.locations, sigma = bw.ppl(ppp.locations)), "sigma"),3)))
# Ancho de banda: scott.iso
plot(density.ppp(ppp.locations, sigma = bw.scott.iso(ppp.locations)), main = paste("Sigma (scott.iso):", round(attr(density.ppp(ppp.locations, sigma = bw.scott.iso(ppp.locations)), "sigma"),3)))
par(mfrow=c(2,3), mar=c(0,0,1,2))
# Ancho de banda por defecto
plot(density.ppp(ppp.locations), main = paste("Sigma (defecto):", round(attr(density.ppp(ppp.locations), "sigma"),3)))
# Ancho de banda: diggle
plot(density.ppp(ppp.locations, sigma = bw.diggle(ppp.locations)), main = paste("Sigma (diggle):", round(attr(density.ppp(ppp.locations, sigma = bw.diggle(ppp.locations)), "sigma"),3)))
# Ancho de banda: CvL
plot(density.ppp(ppp.locations, sigma = bw.CvL(ppp.locations)), main = paste("Sigma (CvL):", round(attr(density.ppp(ppp.locations, sigma = bw.CvL(ppp.locations)), "sigma"),3)))
# Ancho de banda: frac
plot(density.ppp(ppp.locations, sigma = bw.frac(ppp.locations)), main = paste("Sigma (frac):", round(attr(density.ppp(ppp.locations, sigma = bw.frac(ppp.locations)), "sigma"),3)))
# Ancho de banda: ppl
plot(density.ppp(ppp.locations, sigma = bw.ppl(ppp.locations)), main = paste("Sigma (ppl):", round(attr(density.ppp(ppp.locations, sigma = bw.ppl(ppp.locations)), "sigma"),3)))
# Ancho de banda: scott
plot(density.ppp(ppp.locations, sigma = bw.scott(ppp.locations)), main = paste("Sigma (scott):", round(attr(density.ppp(ppp.locations, sigma = bw.scott(ppp.locations)), "sigma"),3)))
plot(density.ppp(ppp.locations, sigma = bw.scott(ppp.locations)), main = paste("Sigma (scott):", round(attr(density.ppp(ppp.locations, sigma = bw.scott(ppp.locations)), "sigma"),3)))
plot(density.ppp(ppp.locations, sigma = bw.scott.iso(ppp.locations)), main = paste("Sigma (scott.iso):", round(attr(density.ppp(ppp.locations, sigma = bw.scott.iso(ppp.locations)), "sigma"),3)))
plot(density.ppp(ppp.locations, sigma = bw.scott(ppp.locations)), main = paste("Sigma (scott.iso):", round(attr(density.ppp(ppp.locations, sigma = bw.scott(ppp.locations)), "sigma"),3)
plot(density.ppp(ppp.locations, sigma = bw.scott(ppp.locations)), main = paste("Sigma (scott):", round(attr(density.ppp(ppp.locations, sigma = bw.scott(ppp.locations)), "sigma"),3)))
plot(density.ppp(ppp.locations, sigma = bw.scott(ppp.locations)), main = paste("Sigma (scott.iso):", round(attr(density.ppp(ppp.locations, sigma = bw.scott(ppp.locations)), "sigma"),3)))
plot(density.ppp(ppp.locations, sigma = bw.scott.iso(ppp.locations)), main = paste("Sigma (scott.iso):", round(attr(density.ppp(ppp.locations, sigma = bw.scott.iso(ppp.locations)), "sigma"),3)))
plot(density.ppp(ppp.locations, sigma = bw.scott(ppp.locations)), main = paste("Sigma (scott.iso):", round(attr(density.ppp(ppp.locations, sigma = bw.scott(ppp.locations)), "sigma"),3)))
round(attr(density.ppp(ppp.locations, sigma = bw.scott(ppp.locations)
plot(density.ppp(ppp.locations, sigma = bw.scott(ppp.locations)), main = paste("Sigma (scott.iso):", round(attr(density.ppp(ppp.locations, sigma = bw.scott(ppp.locations)), "sigma"),3)))
# Ancho de banda: scott.iso
plot(density.ppp(ppp.locations, sigma = bw.scott.iso(ppp.locations)), main = paste("Sigma (scott.iso):", round(attr(density.ppp(ppp.locations, sigma = bw.scott.iso(ppp.locations)), "sigma"),3)))
plot(density.ppp(ppp.locations, sigma = bw.scott(ppp.locations)), main = paste("Sigma (scott.iso):", round(attr(density.ppp(ppp.locations, sigma = bw.scott.iso(ppp.locations)), "sigma"),3)))
plot(density.ppp(ppp.locations, sigma = bw.scott(ppp.locations)), main = paste("Sigma (scott.iso):", round(attr(density.ppp(ppp.locations, sigma = bw.scott(ppp.locations)), "sigma"),3)))
plot(density.ppp(ppp.locations, sigma = bw.scott(ppp.locations)), main = paste("Sigma (scott.iso):", attr(density.ppp(ppp.locations, sigma = bw.scott(ppp.locations)), "sigma")))
plot(density.ppp(ppp.locations, sigma = bw.ppl(ppp.locations)), main = paste("Sigma (ppl):", round(attr(density.ppp(ppp.locations, sigma = bw.ppl(ppp.locations)), "sigma"),3)))
attr(density.ppp(ppp.locations, sigma = bw.scott(ppp.locations)), "sigma")
density.ppp(ppp.locations, sigma = bw.scott(ppp.locations)
attr(density.ppp(ppp.locations, sigma = bw.scott(ppp.locations))
attr(density.ppp(ppp.locations, sigma = bw.scott(ppp.locations)), "sigma")
attr(density.ppp(ppp.locations, sigma = bw.scott(ppp.locations)))
attr(density.ppp(ppp.locations, sigma = bw.scott.iso(ppp.locations)), "sigma")
x <- attr(density.ppp(ppp.locations, sigma = bw.scott(ppp.locations)), "sigma")
x
x <- (density.ppp(ppp.locations, sigma = bw.scott(ppp.locations)), "sigma")
x
x <- (density.ppp(ppp.locations, sigma = bw.scott(ppp.locations)))
x
sigma = bw.scott(ppp.locations
x$
sigma = bw.scott(ppp.locations)
sigma
k1 <- density(ppp.locations, sigma = bw.scott(ppp.locations))
ancho_banda <- round(bw.scott(ppp.locations), 2)
plot(k1, main = paste("Usando un ancho de banda en X de: ", ancho_banda[1], "\n Usando un ancho de banda en Y de: ", ancho_banda[2]))
k1 <- density(ppp.locations, sigma = bw.scott(ppp.locations))
ancho_banda <- round(bw.scott(ppp.locations), 2)
plot(k1, main = paste("Ancho de banda en X de: ", ancho_banda[1], "\n Ancho de banda en Y de: ", ancho_banda[2]))
par(mfrow=c(2,3), mar=c(0,0,1,2))
# Ancho de banda por defecto
plot(density.ppp(ppp.locations), main = paste("Sigma (defecto):", round(attr(density.ppp(ppp.locations), "sigma"),3)))
# Ancho de banda: diggle
plot(density.ppp(ppp.locations, sigma = bw.diggle(ppp.locations)), main = paste("Sigma (diggle):", round(attr(density.ppp(ppp.locations, sigma = bw.diggle(ppp.locations)), "sigma"),3)))
# Ancho de banda: CvL
plot(density.ppp(ppp.locations, sigma = bw.CvL(ppp.locations)), main = paste("Sigma (CvL):", round(attr(density.ppp(ppp.locations, sigma = bw.CvL(ppp.locations)), "sigma"),3)))
# Ancho de banda: frac
plot(density.ppp(ppp.locations, sigma = bw.frac(ppp.locations)), main = paste("Sigma (frac):", round(attr(density.ppp(ppp.locations, sigma = bw.frac(ppp.locations)), "sigma"),3)))
# Ancho de banda: ppl
plot(density.ppp(ppp.locations, sigma = bw.ppl(ppp.locations)), main = paste("Sigma (ppl):", round(attr(density.ppp(ppp.locations, sigma = bw.ppl(ppp.locations)), "sigma"),3)))
# Ancho de banda: scott.iso
plot(density.ppp(ppp.locations, sigma = bw.scott.iso(ppp.locations)), main = paste("Sigma (scott.iso):", round(attr(density.ppp(ppp.locations, sigma = bw.scott.iso(ppp.locations)), "sigma"),3)))
# Ancho de banda: scott
# plot(density.ppp(ppp.locations, sigma = bw.scott.iso(ppp.locations)), main = paste("Sigma (scott.iso):", attr(density.ppp(ppp.locations, sigma = bw.scott.iso(ppp.locations)), "sigma")))
k1 <- density(ppp.locations, sigma = bw.scott(ppp.locations))
ancho_banda <- round(bw.scott(ppp.locations), 2)
plot(k1, main = paste("Ancho de banda en X de: ", ancho_banda[1], "\n Ancho de banda en Y de: ", ancho_banda[2]))
par(mfrow=c(2,3), mar=c(0,0,1,2))
# Ancho de banda por defecto
plot(density.ppp(ppp.locations), main = paste("Sigma (defecto):", round(attr(density.ppp(ppp.locations), "sigma"),3)))
# Ancho de banda: diggle
plot(density.ppp(ppp.locations, sigma = bw.diggle(ppp.locations)), main = paste("Sigma (diggle):", round(attr(density.ppp(ppp.locations, sigma = bw.diggle(ppp.locations)), "sigma"),3)))
# Ancho de banda: CvL
plot(density.ppp(ppp.locations, sigma = bw.CvL(ppp.locations)), main = paste("Sigma (CvL):", round(attr(density.ppp(ppp.locations, sigma = bw.CvL(ppp.locations)), "sigma"),3)))
# Ancho de banda: frac
plot(density.ppp(ppp.locations, sigma = bw.frac(ppp.locations)), main = paste("Sigma (frac):", round(attr(density.ppp(ppp.locations, sigma = bw.frac(ppp.locations)), "sigma"),3)))
# Ancho de banda: ppl
plot(density.ppp(ppp.locations, sigma = bw.ppl(ppp.locations)), main = paste("Sigma (ppl):", round(attr(density.ppp(ppp.locations, sigma = bw.ppl(ppp.locations)), "sigma"),3)))
# Ancho de banda: scott.iso
plot(density.ppp(ppp.locations, sigma = bw.scott.iso(ppp.locations)), main = paste("Sigma (scott.iso):", round(attr(density.ppp(ppp.locations, sigma = bw.scott.iso(ppp.locations)), "sigma"),3)))
k1 <- density(ppp.locations, sigma = bw.scott(ppp.locations))
ancho_banda <- round(bw.scott(ppp.locations), 2)
plot(k1, main = paste("Ancho de banda en X de: ", ancho_banda[1], "\n Ancho de banda en Y de: ", ancho_banda[2]))
par(mfrow=c(2,3), mar=c(0,0,1,2))
# Ancho de banda por defecto
plot(density.ppp(ppp.locations), main = paste("Sigma (defecto):", round(attr(density.ppp(ppp.locations), "sigma"),3)))
# Ancho de banda: diggle
plot(density.ppp(ppp.locations, sigma = bw.diggle(ppp.locations)), main = paste("Sigma (diggle):", round(attr(density.ppp(ppp.locations, sigma = bw.diggle(ppp.locations)), "sigma"),3)))
# Ancho de banda: CvL
plot(density.ppp(ppp.locations, sigma = bw.CvL(ppp.locations)), main = paste("Sigma (CvL):", round(attr(density.ppp(ppp.locations, sigma = bw.CvL(ppp.locations)), "sigma"),3)))
# Ancho de banda: frac
plot(density.ppp(ppp.locations, sigma = bw.frac(ppp.locations)), main = paste("Sigma (frac):", round(attr(density.ppp(ppp.locations, sigma = bw.frac(ppp.locations)), "sigma"),3)))
# Ancho de banda: ppl
plot(density.ppp(ppp.locations, sigma = bw.ppl(ppp.locations)), main = paste("Sigma (ppl):", round(attr(density.ppp(ppp.locations, sigma = bw.ppl(ppp.locations)), "sigma"),3)))
# Ancho de banda: scott.iso
# plot(density.ppp(ppp.locations, sigma = bw.scott.iso(ppp.locations)), main = paste("Sigma (scott.iso):", round(attr(density.ppp(ppp.locations, sigma = bw.scott.iso(ppp.locations)), "sigma"),3)))
k1 <- density(ppp.locations, sigma = bw.scott(ppp.locations))
ancho_banda <- round(bw.scott(ppp.locations), 2)
plot(k1, main = paste("Ancho de banda en X de: ", ancho_banda[1], "\n Ancho de banda en Y de: ", ancho_banda[2]))
k1 <- density(ppp.locations, sigma = bw.scott(ppp.locations))
ancho_banda <- round(bw.scott(ppp.locations), 2)
plot(k1, main = paste("Sigma (scott)", "\n Ancho de banda X e Y: ", ancho_banda[1], ancho_banda[2]))
k1 <- density(ppp.locations, sigma = bw.scott(ppp.locations))
ancho_banda <- round(bw.scott(ppp.locations), 2)
plot(k1, main = paste("Sigma (scott)", "\n Anchos de banda: ", ancho_banda[1], ancho_banda[2]))
k1 <- density(ppp.locations, sigma = bw.scott(ppp.locations))
ancho_banda <- round(bw.scott(ppp.locations), 2)
plot(k1, main = paste("Sigma (scott)", "\n Anchos de banda: ", ancho_banda[1], ",", ancho_banda[2]))
par(mfrow=c(2,3), mar=c(0,0,1,2))
# Ancho de banda por defecto
plot(density.ppp(ppp.locations), main = paste("Sigma (defecto):", round(attr(density.ppp(ppp.locations), "sigma"),3)))
# Ancho de banda: diggle
plot(density.ppp(ppp.locations, sigma = bw.diggle(ppp.locations)), main = paste("Sigma (diggle):", round(attr(density.ppp(ppp.locations, sigma = bw.diggle(ppp.locations)), "sigma"),3)))
# Ancho de banda: CvL
plot(density.ppp(ppp.locations, sigma = bw.CvL(ppp.locations)), main = paste("Sigma (CvL):", round(attr(density.ppp(ppp.locations, sigma = bw.CvL(ppp.locations)), "sigma"),3)))
# Ancho de banda: frac
plot(density.ppp(ppp.locations, sigma = bw.frac(ppp.locations)), main = paste("Sigma (frac):", round(attr(density.ppp(ppp.locations, sigma = bw.frac(ppp.locations)), "sigma"),3)))
# Ancho de banda: ppl
plot(density.ppp(ppp.locations, sigma = bw.ppl(ppp.locations)), main = paste("Sigma (ppl):", round(attr(density.ppp(ppp.locations, sigma = bw.ppl(ppp.locations)), "sigma"),3)))
# Ancho de banda: scott.iso
# plot(density.ppp(ppp.locations, sigma = bw.scott.iso(ppp.locations)), main = paste("Sigma (scott.iso):", round(attr(density.ppp(ppp.locations, sigma = bw.scott.iso(ppp.locations)), "sigma"),3)))
k1 <- density(ppp.locations, sigma = bw.scott(ppp.locations))
ancho_banda <- round(bw.scott(ppp.locations), 2)
plot(k1, main = paste("Sigma (scott)", "\n Anchos de banda: ", ancho_banda[1], ",", ancho_banda[2]))
plot(density(ppp.locations, sigma = 500))
plot(density(ppp.locations, sigma = 700))
plot(density(ppp.locations, sigma = 1000))
plot(density(ppp.locations, sigma = 1200))
plot(density(ppp.locations, sigma = 1500))
k1 <- density(ppp.locations, sigma = bw.scott(ppp.locations))
ancho_banda <- round(bw.scott(ppp.locations), 2)
plot(k1, main = paste("Sigma (scott)", "\n Anchos de banda: ", ancho_banda[1], ",", ancho_banda[2]))
plot(density(ppp.locations, sigma = c(1500,1500)))
plot(density(ppp.locations, sigma = c(1000,1000)))
plot(density(ppp.locations, sigma = c(100,1000)))
plot(density(ppp.locations, sigma = c(500,700)))
plot(density(ppp.locations, sigma = c(500,800)))
plot(density(ppp.locations, sigma = 800))
plot(density(ppp.locations, sigma = 900))
plot(density(ppp.locations, sigma = 700))
intensidad_scott <- density.ppp(ppp.locations, sigma = bw.scott(ppp.locations))
intensidad_visual <- plot(density(ppp.locations, sigma = 700))
# Estimaciones de la intensidad mediante scott
par(mfrow=c(1,2))
plot(intensidad_scott, main = "Gráfico de probabilidad")
plot(intensidad_scott, main = "Gráfico de probabilidad")
contour(intensidad_scott, add = TRUE)
# Estimaciones de la intensidad visualmente
par(mfrow=c(1,2))
plot(intensidad_visual, main = "Gráfico de probabilidad")
plot(intensidad_visual, main = "Gráfico de probabilidad")
contour(intensidad_visual, add = TRUE)
intensidad_scott <- density.ppp(ppp.locations, sigma = bw.scott(ppp.locations))
intensidad_visual <- density(ppp.locations, sigma = 700)
# Estimaciones de la intensidad mediante scott
par(mfrow=c(1,2))
plot(intensidad_scott, main = "Gráfico de probabilidad")
plot(intensidad_scott, main = "Gráfico de probabilidad")
contour(intensidad_scott, add = TRUE)
# Estimaciones de la intensidad visualmente
par(mfrow=c(1,2))
plot(intensidad_visual, main = "Gráfico de probabilidad")
plot(intensidad_visual, main = "Gráfico de probabilidad")
contour(intensidad_visual, add = TRUE)
persp(intensidad_visual)
par(mfrow=c(1,2))
persp(intensidad_scott)
persp(intensidad_visual)
persp(intensidad_scott)
persp(intensidad_visual)
par(mfrow=c(2,3),mar=c(0,0,1,2))
plot(predict(base.loc), main='Modelo base')
points(ppp.locations, pch=16, cex=0.2)
plot(predict(loglin.loc), main='log-linear')
points(ppp.locations, pch=16, cex=0.2)
plot(predict(loglin.loc.x), main='log-linear en x')
points(ppp.locations, pch=16, cex=0.2)
plot(predict(loglin.loc.y), main='log-linear en y')
points(ppp.locations, pch=16, cex=0.2)
plot(predict(logquad.loc), main='log-cuadrático con interacción')
points(ppp.locations, pch=16, cex=0.2)
plot(predict(logcubic.loc), main='log-cúbico con interacción')
points(ppp.locations, pch=16, cex=0.2)
par(mfrow=c(2,3),mar=c(1,1,2,2))
diagnose.ppm(base.loc, which = "smooth", main = "modelo base")
diagnose.ppm(loglin.loc, which = "smooth", main = 'log-linear')
diagnose.ppm(loglin.loc.x, which = "smooth", main = 'log-linear en x')
diagnose.ppm(loglin.loc.y, which = "smooth", main = 'log-linear en y')
diagnose.ppm(logquad.loc, which = "smooth", main = 'log-cuadrático')
diagnose.ppm(logcubic.loc, which = "smooth", main = 'log-cúbico')
plot(Kinhom(ppp.locations), main='clustered')
plot(Kinhom(ppp.locations), main='clustered')
plot(pcfinhom(ppp.locations), main='clustered')
Env_inhom <- envelope(Y = ppp.locations, fun = Kinhom)
plot(Env_inhom, main = "Envelopes inhomogeneo")
Env_inhom_g <- envelope(Y = ppp.locations, fun = pcfinhom)
plot(Env_inhom_g, main = "Envelopes")
library(tmap)
install.packages("tmap")
library(tmap)
knitr::opts_chunk$set(echo = TRUE, message=FALSE, warning=FALSE)
# Medatados
library(readxl)
library(kableExtra)
library(spatstat)
library(rgeos)
library(sf)
library(rgdal)
library(maptools)
Metadato <- read_excel("Metadato.xlsx")
kable(Metadato)  %>%
kable_paper("hover", full_width = F)
civica <- read.csv("Puntos_de_Recarga.csv",
header = T, sep=",",
dec = ".")
kable(head(civica)) %>%
kable_paper("hover", full_width = F)
library(tmap)
shape_civica <- st_read("Puntos_de_Recarga_C%C3%ADvica.shp")
region <- st_read("Area-Metropolitana.shp")
tmap_options(check.and.fix = TRUE, basemaps = "OpenStreetMap")
tmap_mode('view')
tm_shape(region)+
tm_polygons(alpha = 0.5, border.alpha = 0.7) +
tm_shape(shp = shape_civica)+
tm_dots(size = 0.01)
## read in the data
shape_civica <- st_read("Puntos_de_Recarga_C%C3%ADvica.shp")
# Conversión a tipo factor
shape_civica$municipio <- as.factor(shape_civica$municipio)
# Municipios a eliminar
indices <- shape_civica$municipio %in% c("Barbosa", "Girardota", "Caldas")
# Eliminación de los municipios en el conjunto de dato
shape_civica <- shape_civica[!indices, ]
class(shape_civica)
# Latitud - Longitud
data_long_lat <- as.matrix(data.frame(x=shape_civica$longitud,
y=shape_civica$latitud))
# Datos en metros (UTM)
data_UTM <- project(data_long_lat ,"+proj=utm +zone=18N +ellps=WGS84")
# Lectura del shape de la región de interés:
coordinate.units <- c("metre", "metres")
# region del area metropolitana
region <- st_read("Area-Metropolitana.shp")
region <- st_transform(region, crs = CRS("+proj=utm +zone=18N +ellps=WGS84"))
# Ventana
win <- as(as(region, 'Spatial'), 'owin')
ppp.locations <- ppp(x = data_UTM[,1],
y = data_UTM[,2],
window = win)
# Gráfico del objeto ppp
unitname(ppp.locations) <- coordinate.units
ppp.locations <- as.ppp(ppp.locations)
plot(ppp.locations)
win <- ripras(ppp.locations)
ppp.locations <- ppp(x = data_UTM[,1],
y = data_UTM[,2],
window = win)
ppp.locations <- as.ppp(ppp.locations)
plot(ppp.locations)
par(mfrow=c(1,2))
qc.loc <- quadratcount(ppp.locations, nx=3, ny=4)
plot(ppp.locations, pch=3, cex=0.6)
plot(qc.loc, add=T, textargs = list(col='red'))
plot(as.im(ppp.locations,dimyx=3), main="Conteo por cuandrantes")
quadrat.test(qc.loc)
par(mfrow=c(2,3), mar=c(0,0,1,2))
# Ancho de banda por defecto
plot(density.ppp(ppp.locations), main = paste("Sigma (defecto):", round(attr(density.ppp(ppp.locations), "sigma"),3)))
# Ancho de banda: diggle
plot(density.ppp(ppp.locations, sigma = bw.diggle(ppp.locations)), main = paste("Sigma (diggle):", round(attr(density.ppp(ppp.locations, sigma = bw.diggle(ppp.locations)), "sigma"),3)))
# Ancho de banda: CvL
plot(density.ppp(ppp.locations, sigma = bw.CvL(ppp.locations)), main = paste("Sigma (CvL):", round(attr(density.ppp(ppp.locations, sigma = bw.CvL(ppp.locations)), "sigma"),3)))
# Ancho de banda: frac
plot(density.ppp(ppp.locations, sigma = bw.frac(ppp.locations)), main = paste("Sigma (frac):", round(attr(density.ppp(ppp.locations, sigma = bw.frac(ppp.locations)), "sigma"),3)))
# Ancho de banda: ppl
plot(density.ppp(ppp.locations, sigma = bw.ppl(ppp.locations)), main = paste("Sigma (ppl):", round(attr(density.ppp(ppp.locations, sigma = bw.ppl(ppp.locations)), "sigma"),3)))
# Ancho de banda: scott.iso
# plot(density.ppp(ppp.locations, sigma = bw.scott.iso(ppp.locations)), main = paste("Sigma (scott.iso):", round(attr(density.ppp(ppp.locations, sigma = bw.scott.iso(ppp.locations)), "sigma"),3)))
k1 <- density(ppp.locations, sigma = bw.scott(ppp.locations))
ancho_banda <- round(bw.scott(ppp.locations), 2)
plot(k1, main = paste("Sigma (scott)", "\n Anchos de banda: ", ancho_banda[1], ",", ancho_banda[2]))
intensidad_scott <- density.ppp(ppp.locations, sigma = bw.scott(ppp.locations))
# Estimaciones de la intensidad mediante scott
par(mfrow=c(1,2))
plot(intensidad_scott, main = "Gráfico de probabilidad")
plot(intensidad_scott, main = "Gráfico de probabilidad")
contour(intensidad_scott, add = TRUE)
intensidad_visual <- density(ppp.locations, sigma = 700)
# Estimaciones de la intensidad visualmente
par(mfrow=c(1,2))
plot(intensidad_visual, main = "Gráfico de probabilidad")
plot(intensidad_visual, main = "Gráfico de probabilidad")
contour(intensidad_visual, add = TRUE)
persp(intensidad_scott)
persp(intensidad_visual)
base.loc <- ppm(ppp.locations, ~1)
coef(base.loc)
loglin.loc <- ppm(ppp.locations, ~x+y)
coef(loglin.loc)
loglin.loc.x <- ppm(ppp.locations, ~x)
coef(loglin.loc.x)
loglin.loc.y <- ppm(ppp.locations, ~y)
coef(loglin.loc.y)
logquad.loc <- ppm(ppp.locations, ~polynom(x, y, 2))
coef(logquad.loc)
logcubic.loc <- ppm(ppp.locations, ~polynom(x, y, 3))
coef(logcubic.loc)
par(mfrow=c(2,3),mar=c(0,0,1,2))
plot(predict(base.loc), main='Modelo base')
points(ppp.locations, pch=16, cex=0.2)
plot(predict(loglin.loc), main='log-linear')
points(ppp.locations, pch=16, cex=0.2)
plot(predict(loglin.loc.x), main='log-linear en x')
points(ppp.locations, pch=16, cex=0.2)
plot(predict(loglin.loc.y), main='log-linear en y')
points(ppp.locations, pch=16, cex=0.2)
plot(predict(logquad.loc), main='log-cuadrático con interacción')
points(ppp.locations, pch=16, cex=0.2)
plot(predict(logcubic.loc), main='log-cúbico con interacción')
points(ppp.locations, pch=16, cex=0.2)
par(mfrow=c(2,3),mar=c(1,1,2,2))
diagnose.ppm(base.loc, which = "smooth", main = "modelo base")
diagnose.ppm(loglin.loc, which = "smooth", main = 'log-linear')
diagnose.ppm(loglin.loc.x, which = "smooth", main = 'log-linear en x')
diagnose.ppm(loglin.loc.y, which = "smooth", main = 'log-linear en y')
diagnose.ppm(logquad.loc, which = "smooth", main = 'log-cuadrático')
diagnose.ppm(logcubic.loc, which = "smooth", main = 'log-cúbico')
plot(Kinhom(ppp.locations), main='clustered')
plot(Kinhom(ppp.locations), main='clustered', lambda = intensidad_scott)
plot(pcfinhom(ppp.locations), main='clustered', lambda = intensidad_scott)
Env_inhom <- envelope(Y = ppp.locations, fun = Kinhom, lambda = intensidad_scott)
plot(Env_inhom, main = "Envelopes inhomogeneo")
Env_inhom_g <- envelope(Y = ppp.locations, fun = pcfinhom, lambda = intensidad_scott)
plot(Env_inhom_g, main = "Envelopes")
Env_inhom <- envelope(Y = ppp.locations, fun = Kinhom, lambda = predict(logquad.loc))
plot(Env_inhom, main = "Envelopes inhomogeneo")
Env_inhom <- envelope(Y = ppp.locations, fun = Kinhom, lambda = intensidad_visual)
plot(Env_inhom, main = "Envelopes inhomogeneo")
Env_inhom <- envelope(Y = ppp.locations, fun = Kinhom)
plot(Env_inhom, main = "Envelopes inhomogeneo")
