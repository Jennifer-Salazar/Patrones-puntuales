# Clase 3

# Cargar la libreria leaflet
library(leaflet)

#Paso 1 : creacion de un contenedor
contenedor <- leaflet() # Crea una ventana vacia
contenedor


#Paso 2
# Creacion del mapa base con contenedor
mapa_base <- leaflet() %>% addTiles()
mapa_base

# Parte 3: Ubicación de un lugar en el mapa, ejemplo palacio nacional:
# Ubicacion - Latitud - Longitud - Marcadores - Circulo
# Palacio Nacional de La Republica Dominicana 18.47474559888523, -69.89787861615132

palacio_nacional <- leaflet() %>% addTiles() %>% 
  addMarkers(lat=18.47474559888523,lng=-69.89787861615132) %>% 
  addCircleMarkers(lat=18.47474559888523,lng=-69.89787861615132,color="red",radius=10)

# Ver el resultado de manera gráfica (es interactiva)
palacio_nacional


# Palacio Nacional de La Republica Dominicana 18.47474559888523, -69.89787861615132

# Aregando el logo de R y una mini ventana del mapa
img <-"https://www.r-project.org/logo/Rlogo.svg" # URL de la imagen del logo

palacio_nacional <- leaflet() %>% addTiles() %>% 
  leafem::addLogo(img,url="https://cran.r-project.org/",position="topright",width=25,height=25) %>%
  addMarkers(lat=18.47474559888523,lng=-69.89787861615132) %>%
  addCircleMarkers(lat=18.47474559888523,lng=-69.89787861615132,color="orange",radius=40) %>%
  addMiniMap(position="bottomleft",toggleDisplay=TRUE) # mini ventana del mapa

palacio_nacional


#Mas representaciones del palacio nacional
# Popup configuracion

# Palacio Nacional de La Republica Dominicana 18.47474559888523, -69.89787861615132

lugar_01 <- c("Palacio Nacional Rep. Dom") #Nombres

lat_01 <-c(18.47474559888523) #Latitud

lng_01 <-c(-69.89787861615132) #Longitud

# Información web del palacio nacional
url_01 <-paste0("<a href='https://bit.ly/3hgCyg3' target='_blank'>Web Palacio Nacional</a>")

img_01 <- paste0("<center><img src='https://bit.ly/36u5WNB' width=200 height=100></center>")

# Imagen logo de R
img <-"https://www.r-project.org/logo/Rlogo.svg"

palacio_nacional <- leaflet() %>% 
  
  addTiles() %>% 
  
  leafem::addLogo(img,url="https://cran.r-project.org/",position="topright",width=25,height=25) %>% 
  
  addMarkers(lat=18.47474559888523,lng=-69.89787861615132,popup=paste(sep="<br>","<b>Lugar:</b>",lugar_01,"<b>Latitud:</b>",lat_01,"<b>Longitud:</b>",lng_01,"<b>URL:</b>",url_01,img_01)) %>% 
  
  addCircleMarkers(lat=18.47474559888523,lng=-69.89787861615132,color="orange",radius=40) %>% 
  
  addMiniMap(position="bottomleft",toggleDisplay=TRUE)


palacio_nacional


# Multiples Marcadores (distinguiendose entre si)

cent_hist <- data.frame(lugar=c("Iglesia Nuestra Señora de La Merced",
                                "Convento Regina Angelorum",
                                "Puerta de la Misericordia"),
                        latitud=c(18.47416921486365,
                                  18.471116404923126,
                                  18.468775880481004),    
                        longitud=c(-69.88824745014279,
                                   -69.8871531089362,
                                   -69.89011426748678),               
                        color=c("orange","blue","purple"))

# Se grafican la ublicación de diferentes lugares en el mapa
centro_historico <- leaflet(data=cent_hist) %>% 
  
  addTiles() %>%  
  
  addMarkers(lat=~latitud,lng=~longitud) %>% 
  
  addCircleMarkers(lat=~latitud,lng=~longitud,color=~color,radius=30)

centro_historico



# Multiples marcadores 

# puntos <- read.csv("puntos_dom.txt")
# 
# puntos_frame <- data.frame(puntos)
# 
# centro_historico <- leaflet(data=puntos_frame) %>% 
#   
#   addTiles() %>%  
#   
#   addMarkers(lat=~latitud,lng=~longitud) %>% 
#   
#   addCircleMarkers(lat=~latitud,lng=~longitud,color=~color,radius=30)
# 
# centro_historico

# -------------------------------------------------------------------

# Actividad con direcciones y nombres de ubicaciones
## Obtencon de las coordenadas geograficas de la ubicacion por su direccion

# Limpieza de memoria
rm(list=ls())

# Establecer el espacio de trabajo
# setwd(" ")

# Cargar las librerias para la georreferenciacion
library(sp)
library(readxl)
library(raster)
library(tmaptools)
library(tidygeocoder)
library(leaflet)
library(rgdal)



# Geocodifica una ubicacion usando OpenStreetMap Nominatim (paquete tmaptools)
?geocode_OSM

# Geocodificacion de direcciones (paquete tidygeocoder)
?geo


# Algunos ejemplos de como se utiliza la funcion geocode_OSM
# Indicar la localizacion
geocode_OSM("Colombia")
geocode_OSM("Medellin, Colombia")
geocode_OSM("Universidad Nacional, Medellin, Colombia")
geocode_OSM("Parque Explora, Medellin, Colombia")
geocode_OSM("Cra. 87 30-65, Medellin, Colombia")


# Verificacion grafica de la geocodificacion
locUNAL <- geocode_OSM("Universidad Nacional, Medellin, Colombia")
locEXP <- geocode_OSM("Parque Explora, Medellin, Colombia")
m <- leaflet() %>% addTiles()
m

# Gráfica ubicando la universidad Naciona
m %>% addMarkers(lat=locUNAL$coords[2],lng=locUNAL$coords[1])

# Graficar la universidad y el parque explora
m %>% addMarkers(lat=locUNAL$coords[2],lng=locUNAL$coords[1]) %>% 
  addMarkers(lat=locEXP$coords[2],lng=locEXP$coords[1])%>%
  addCircleMarkers(lat=locUNAL$coords[2],lng=locUNAL$coords[1],color="orange",radius=40)%>%
  addCircleMarkers(lat=locEXP$coords[2],lng=locEXP$coords[1],color="purple",radius=40)


# Algunos ejemplos de como se utiliza la funcion geo (las salidas de este son tipo tidy)
geo(address="Cra. 87 30-65, Medellin, Colombia", method='osm')
geo(address="Cl. 68 48-30, Medellin, Colombia", method='osm')
geo(address="Medellin, Colombia", method='osm')
geo(address="Parque Explora, Medellin, Colombia", method='osm')

# Comparacion de la precision en la Geocodificacion de ambas funciones
geocode_OSM("Medellin, Colombia")
geo(address="Medellin, Colombia", method='osm')

# Comparandolos en una ubicación especifica
geocode_dir <- geocode_OSM("Cl. 68 48-30, Medellin, Colombia")
dir_geo <- geo(address="Cl. 68 48-30, Medellin, Colombia", method='osm')

# Comparar los resultados de la latitud en ambos
lat_geocode_OSM <- geocode_dir$coords[2]
lat_geo <- dir_geo$lat

# Comparar los resultados de la longitud en ambos
long_geocode_OSM <- geocode_dir$coords[1]
long_geo <- dir_geo$long

# Data frame para comparar ambos resultados
Comparacion <- data.frame(latitud=c(lat_geocode_OSM,lat_geo), 
                          longitud=c(long_geocode_OSM, long_geo))
Comparacion

---------------------------------------------------------------------
# Actividad con las direcciones 


# Cargar el archivo de Excel con direcciones.

library(readxl)
DireccionesGeo <- read_excel("Direcciones.xlsx")
head(DireccionesGeo)

# Concatenar cadenas de caracteres de las direcciones
DirCod <- paste0(DireccionesGeo$Direccion,",",DireccionesGeo$Ciudad,
                 ",",DireccionesGeo$Pais)
head(DirCod)


# Geocodificacion de una lista de direcciones con la funcion geocode_OSM
geocode1 <- geocode_OSM(DirCod)
# Con estacogio 7 direcciones

# Geocodificacion de una lista de direcciones con la funcion geo
geo(address=DirCod, method='osm')

#usando otro metodo en geo:
geo2 <- geo(address=DirCod, method="arcgis") # arcgis funciona mejor que osm
# Con esta cogio todas las direcciones


# Gráficando mis direcciones

mis_direcciones <- leaflet() %>% addTiles() %>% 
  addCircleMarkers(lat=geo2$lat,lng=geo2$long,color="purple",radius=8)

mis_direcciones


#######################################################################################################

# Clase 4

# Actividad 2

# Ejemplo: Creacion de mapas interactivos para los datos vivienda
DVGeo <- read_excel("Datos_Vivienda_Cali/Datos_Vivienda.xlsx")
dim(DVGeo)
names(DVGeo)
head(DVGeo)


set.seed(1234) #seed for replication purposes
cooDVGeo <- DVGeo[sample(nrow(DVGeo),size=500),]

n <- leaflet() %>% addTiles()
n


# Ubicando las viviendas con puntos azules
n %>% addProviderTiles(providers$CartoDB.Positron) %>% 
  addCircles(lng=cooDVGeo$cordenada_longitud,lat=cooDVGeo$Cordenada_latitud)%>% 
  addCircles(lng=cooDVGeo$cordenada_longitud,lat=cooDVGeo$Cordenada_latitud)

# Ubicando las viviendas con puntos rojos
n %>% addCircles(lng=cooDVGeo$cordenada_longitud,lat=cooDVGeo$Cordenada_latitud,
                 col="red")

# Ubicando las viviendas con markers
n %>% addMarkers(lng=cooDVGeo$cordenada_longitud,lat=cooDVGeo$Cordenada_latitud)


# Cluestizando las viviendas
n %>% addMarkers(lng=cooDVGeo$cordenada_longitud,lat=cooDVGeo$Cordenada_latitud,
                 clusterOptions=markerClusterOptions())



# Convertir coordenadas UTM a Geograficas
comunas <- shapefile("Datos_Vivienda_Cali/Comunas/bcs_lim_comunas.shp",warnPRJ=FALSE)
comunas
head(coordinates(comunas))
plot(comunas)


# Convertir de UTM a longitud-latitud
comunasGeo <- spTransform(comunas, CRSobj=CRS("+proj=longlat +ellps=WGS84"))
head(coordinates(comunasGeo))
plot(comunasGeo)



q <- leaflet(comunasGeo) %>% addTiles()
q

q %>% addPolygons(color="red") %>% addCircles(lng=cooDVGeo$cordenada_longitud,
                                              lat=cooDVGeo$Cordenada_latitud)



# Convertir coordenadas Geograficas a UTM 
dataF <- as.matrix(data.frame(x=cooDVGeo$cordenada_longitud,
                              y=cooDVGeo$Cordenada_latitud))
head(dataF)

coordB <- project(dataF,"+proj=utm +zone=18N +ellps=WGS84")
head(coordB)


##############################################################################################


# Clase 5

# Operaciones entre Shapes

# librerias utiles
require(sp)
require(raster)
require(rgdal)
require(rgeos)
require(ggplot2)

## Importar Datos de Comunas y Violencia

# Los siguientes datos corresponden a registros de violencia (homicidios) en Cali 
# durante el año 2017 a nivel puntual (persona victima).

# Se lee los datos de comunas como SpatialPolygonsDataFrame
comunas <- shapefile("Materil_Complementario_Clase_5/Comunas/bcs_lim_comunas_WGS84.shp")
class(comunas)
comunas

# Se lee los datos de homicidios como un SpatialPointsDataFrame
homicidios <- shapefile("Materil_Complementario_Clase_5/Homicidios2017/2017_0_WGS84.shp")
class(homicidios)
homicidios
names(homicidios)
head(homicidios)



# Grafica de los homicidios reportados en la base de datos
# Esta gráfica es de poligonos delimitando las comunas y 
# puntos rojos denotando los homicidios ocurridos
plot(comunas) 
points(homicidios,col="red")

# Se observa en el figura que algunos de los homicidios se registran por fuera de 
# la ciudad (se realizara la operacion intersect para limitar el area de estudio). 
# Adicionalmente la tabla muestra los registros de caractesticas de la victima y 
# el hecho: ejemplo: edad, sexo, movil, arma usada entre otros.

## Operacion espacial intersect

# Esta operaracion permite intersectar dos shapes de diferente geometria (puntos,
# lineas o poligonos), generando un nuevo resultados con la integracion no solo 
# a nivel espacial si no en la tabla de atributos (pega las variables nuevas en 
# el shape).

# Se intersectan los homicidios con las comunas, es decir no quedarán homicidios 
# que no se hayan presentado en esas comunas
homicidios2 <-  intersect(homicidios,comunas)
class(homicidios2)
homicidios2

# Gráfico de las comunas y homicidios que se intersectan
plot(comunas)
points(homicidios2,col="red")


# Se colorea una comuna especifica, por ejemplo la comuna 11:
plot(comunas)
plot(comunas[11,],col="red",add=TRUE)



# Se ponen cruces en donde ocurrieron homicidios sobre una comuna especifica
# Por ejemplo, la comuna 13:
pos13=which(homicidios2$com==13)
homicidios_dela13=homicidios2[pos13,]

plot(comunas)
plot(homicidios_dela13,col="red",add=TRUE)

# Se puede notar que quedo un punto por fuera de la comuna 13

# Intersectar el punto que queda fuera de la comuna 13 con la comuna donde esta quedando
# para ello vamos a resaltar la comuna 13 para solo ver los homicidios presentes allí.

##Opcion2 - Intersectar el shape de comunas (13) con los homicidios

# Se filtra la comuna 13
pos_com13=which(comunas$COMUNA==13)
comuna13=comunas[pos_com13,]
plot(comuna13)

# Se realiza la intersección entre los homicidios y la comuna 13
homicidios_dela13_op2=intersect(homicidios2,comuna13)

# Grafico de las comuna con solo los homicidios que se presentaron en la comuna 13
plot(comunas)
points(homicidios_dela13_op2, col="red")

-----------------------------------
# FUNCION over()
-----------------------------------
  
# Descripcion de la funcion over()
# superposicion espacial consistente para puntos, cuadriculas y poligonos: 
# en las ubicaciones espaciales del objeto x recupera los indices o atributos 
# del objeto espacial y.

## El total (length) de casos por comunas (aplica para cualquier columna de homicidios)
over(x = comunas, y = homicidios2[,1], fn = length)


##El promedio de la edad de las personas fallecidas por comuna
over(x = comunas, y = homicidios2[,12], fn = mean)

# el signo @ es un simil de $ pero mas potente, da informacian mas relevante
##Vamos a pegar ese atributo en el shape de comunas
comunas@data


# Se agrega la variable numero de casos por comuna (total_casos) a la data de comunas
total=over(x = comunas,y = homicidios2[,1],fn = length)
comunas@data$total_casos=total[,1]
comunas@data


#Vamos a visualizarlo en datos de area del numero de casos por comuna
spplot(comunas[,6])

#Ahora veamos como incorporamos una nueva variable: homicidios por arma cortopunzante
es_cortpunzante=as.numeric(homicidios2$modalidad=="CORTOPUNZANTE")
homicidios2$cortopunzante=es_cortpunzante

total_corto=over(x = comunas,y = homicidios2[,53],fn = sum)
comunas@data$total_corto=total_corto[,1]
comunas@data


# Graficos:
# Vamos a visualizarlo en datos de area

# Mapa descriptivo por comunas de la cantidad de muertes por arma corto punzante
spplot(comunas[,7])

## Note que el spplot puede generar un panel de mapas en la misma escala
#  panel de mapas del total de casos por comuna y  cantidad de muestes por arma cortopunzante
spplot(comunas[,6:7])

##################################### TAREA ##########################################

## Tarea: Colocar lo que se hizo hoy bien comentado y mejorado (label a los mapas)
# Realizar un panel de mapas (por mes: 12 mapas) - Cantidad de muertes por mes 
# (por dia de la semana: 7 mapas) - Cantidad de muertos por dia



#### Solucion 

#1. Los comentarios quedaron arriba

# 2. Labels a los mapas

# Graficos:
# Vamos a visualizarlo en datos de area:


# Mapa del numero de casos por comuna
spplot(comunas[,6], zcol = comunas@data$NOMBRE, 
       main = "Número de casos (muertes) por comuna", 
       col="transparent")

# Mapa descriptivo por comunas de la cantidad de muertes por arma corto punzante
spplot(comunas[,7])


# Panel de mapas del total de casos por comuna y  cantidad de muestes por arma cortopunzante
spplot(comunas[,6:7])


# 3. 

#Se crea una variable binaria que indique si pertenece al respectivo mes 

# Variable Enero
Enero <- as.numeric(homicidios2$mes=="JAN")
homicidios2$Enero = Enero

# Variable Febrero
Febrero <- as.numeric(homicidios2$mes=="FEB")
homicidios2$Febrero = Febrero

# Variable Marzo
Marzo <- as.numeric(homicidios2$mes=="MAR")
homicidios2$Marzo = Marzo

# Variable Abril
Abril <- as.numeric(homicidios2$mes=="APR")
homicidios2$Abril = Abril


# Variable Mayo
Mayo <- as.numeric(homicidios2$mes=="MAY")
homicidios2$Mayo = Mayo

# Variable Junio
Junio <- as.numeric(homicidios2$mes=="JUN")
homicidios2$Junio = Junio

# Variable Julio
Julio <- as.numeric(homicidios2$mes=="JUL")
homicidios2$Julio = Julio

# Variable Agosto
Agosto <- as.numeric(homicidios2$mes=="AUG")
homicidios2$Agosto = Agosto


# Variable Septiembre
Septiembre <- as.numeric(homicidios2$mes=="SEP")
homicidios2$Septiembre = Septiembre

# Variable Octubre
Octubre <- as.numeric(homicidios2$mes=="OCT")
homicidios2$Octubre = Octubre

# Variable Noviembre
Noviembre <- as.numeric(homicidios2$mes=="NOV")
homicidios2$Noviembre = Noviembre

# Variable Diciembre
Diciembre <- as.numeric(homicidios2$mes=="DEC")
homicidios2$Diciembre = Diciembre

# TOTAL DE CASOS POR MES POR CADA COMUNA

# Enero
total_casos_enero=over(x = comunas,y = homicidios2[,54],fn = sum)
comunas@data$Enero=total_casos_enero[,1]


# Febrero
total_casos_febrero=over(x = comunas,y = homicidios2[,55],fn = sum)
comunas@data$Febrero=total_casos_febrero[,1]


# Marzo
total_casos_marzo=over(x = comunas,y = homicidios2[,56],fn = sum)
comunas@data$Marzo=total_casos_marzo[,1]


# Abril
total_casos_abril=over(x = comunas,y = homicidios2[,57],fn = sum)
comunas@data$Abril=total_casos_abril[,1]


#Mayo
total_casos_mayo=over(x = comunas,y = homicidios2[,58],fn = sum)
comunas@data$Mayo=total_casos_mayo[,1]


# Junio
total_casos_junio=over(x = comunas,y = homicidios2[,59],fn = sum)
comunas@data$Junio=total_casos_junio[,1]


# Julio
total_casos_julio=over(x = comunas,y = homicidios2[,60],fn = sum)
comunas@data$Julio=total_casos_julio[,1]


# Agosto
total_casos_agosto=over(x = comunas,y = homicidios2[,61],fn = sum)
comunas@data$Agosto=total_casos_agosto[,1]


# Septiembre
total_casos_septiembre=over(x = comunas,y = homicidios2[,62],fn = sum)
comunas@data$Septiembre=total_casos_septiembre[,1]


# Octubre
total_casos_octubre=over(x = comunas,y = homicidios2[,63],fn = sum)
comunas@data$Octubre=total_casos_octubre[,1]


# Noviembre
total_casos_noviembre=over(x = comunas,y = homicidios2[,64],fn = sum)
comunas@data$Noviembre=total_casos_noviembre[,1]



# Diciembre
total_casos_diciembre=over(x = comunas,y = homicidios2[,65],fn = sum)
comunas@data$Diciembre=total_casos_diciembre[,1]


# Graficos:
# Vamos a visualizarlo en datos de area

# Mapa descriptivo por comunas de la cantidad de muertes por arma corto punzante
spplot(comunas[8:19])



####################################################################################################

# 5/Abril/022

# Clase 7

##GeoR - Clase 1

require(geoR)# Creado por el director de CHICAS, es un paquete muy potente de estad?stica espacial
library(readxl)
datos = read_excel("base_cienaga.xls")

head(datos)

# Muestreo igualmente espaciado
plot(datos[ ,1:2])

#covertir en dato geoR
geodatos=as.geodata(datos,coords.col=1:2,data.col=4)
class(geodatos)
geodatos

plot(geodatos)

# Probar correlaci?n espacial

##############################################################################################

# Clase 8 

# Radio Gardel 

# Se habla de Autocorrelaci?n espacial solo en datos de area y geoestadisticos.



#########################################################################################

# 3/Mayo/2022


# Cargar los paquetes
library(geoR)
library(readxl)
library(scatterplot3d)

# Cargar la base de datos Cienaga Crande
datos <- read_excel("base_cienaga.xls")
head(datos)

# Localizaciones de muestreo
plot(datos[,1:2])

# Covertir en formato geoR seleccionando la variable temperatura
geodatos <- as.geodata(datos,coords.col=1:2,data.col=4)
class(geodatos)
geodatos

# Graficos descriptivos 
plot(geodatos)

# Defincion de los intervalos de conteo - Variograma Cloud
summary(dist(geodatos$coords))
plot(variog(geodatos,option = "cloud"))

# Semivariograma muestral
variograma <- variog(geodatos,option="bin",uvec=seq(0,20000,1500))
variograma

# Grafico del variograma muestral
plot(variograma)




#############################################################
#          No correlación espacial con Monte Carlo
#############################################################

# Destruir la correlación espacial a traves de permutaciones aleatorias
geoP <- data.frame(geodatos$coords,sample(geodatos$data))
geodatosP <- as.geodata(geoP,coords.col=1:2,data.col=3)
plot(geodatosP)

# Semivariograma muestral
variogramaP <- variog(geodatosP,option = "bin",uvec=seq(0,20000,1500))
plot(variograma, col="2")
lines(variogramaP,type="l")

for (i in 1:99) {
  geoP <- data.frame(geodatos$coords,sample(geodatos$data))
  geodatosP <- as.geodata(geoP,coords.col=1:2,data.col=3)
  variogramaP <- variog(geodatosP,option = "bin",uvec=seq(0,20000,1500))
  lines(variogramaP,type="l")
}

# Semivariograma con bandas de no correlación
plot(variograma)
variograma_mc <- variog.mc.env(geodatos,obj=variograma,nsim=99)
lines(variograma_mc,col="red") # Test gráfico, bandas rojas(aleatoriedad) 
# en donde si el variograma queda dentro de ellas no hay autocorrelación parcial

